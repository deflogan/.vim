" =============================================================================
" airline
" =============================================================================
let g:airline_theme='sol'
let g:airline#extensions#tabline#enabled = 1
" set left separator
let g:airline#extensions#tabline#left_sep = ' '
" set left separator which are not editting
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#whitespace#disabled = 1
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '◀'
"let g:airline_section_c = '%T'
" =============================================================================
" airline
" =============================================================================
nmap <Leader>fw :bufdo :Bdelete<CR>
" =============================================================================
" tagbar
" =============================================================================
nmap <Leader>ft :TagbarToggle<CR>
nmap tg :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q *<CR>:set tags+=./tags<CR>
" =============================================================================
" vim skip 每次跳一半
" =============================================================================
"let g:vimskip_disable_default_maps=1
"nnoremap e <Plug>(NORMALForward)
"nnoremap gm <Plug>(SkipToCenter)
let g:vimskip_mapforwardskip = 'e'
let g:vimskip_mapbackwardskip = 'E'
let g:vimskip_maptocenter = 'gm'
" =============================================================================
" gundo
" =============================================================================
nnoremap <Leader>u :GundoToggle<CR>
" =============================================================================
" multiple cursor
" =============================================================================
let g:multi_cursor_prev_key='<C-u>'
" =============================================================================
" easymotion
" =============================================================================
map f <Plug>(easymotion-prefix)
" =============================================================================
" 扩展选择范围
" =============================================================================
nmap K <Plug>(expand_region_expand)
vmap K <Plug>(expand_region_expand)
nmap J <Plug>(expand_region_shrink)
vmap J <Plug>(expand_region_shrink)
"==========================================
" vim-indent
"==========================================
" vim-indent-guides
"随 vim 自启动
" let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
"let g:indent_guides_start_level=2
" 色块宽度
"let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
"nmap <silent> <Leader>i <Plug>IndentGuidesToggle

"==========================================
" UltiSnips
"==========================================
" UltiSnips 的 tab 键与 YCM 冲突，重新设定
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"

"==========================================
" NERDTree
"==========================================
" 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap <Leader>fl :NERDTreeToggle<CR>
" 设置NERDTree子窗口宽度
let NERDTreeWinSize=20
" 设置NERDTree子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
" 当打开 NERDTree 窗口时，自动显示 Bookmarks
let NERDTreeShowBookmarks=1
"autocmd VimEnter * NERDTree

"==========================================
" MiniBuffer
"==========================================
"map <Leader>n :MBEToggle<cr>
"inoremap <C-j> <Esc>:MBEbp<cr>i
"inoremap <C-k> <Esc>:MBEbn<cr>i
"inoremap <C-h> <Esc>:MBEbb<cr>i
"inoremap <C-l> <Esc>:MBEbf<cr>i
"nnoremap <C-j> :MBEbp<cr>
"nnoremap <C-k> :MBEbn<cr>
"nnoremap <C-h> :MBEbb<cr>
"nnoremap <C-l> :MBEbf<cr>
"nnoremap <C-`> :MBEToggleMRU<CR>
"hi MBEVisibleActiveNormal  ctermfg=28
"nnoremap <Leader>w :MBEbd<CR>
"let g:miniBufExplorerAutoStart=0

" 改变minibuffer状态栏颜色,文本
"fun! FixMiniBufExplorerTitle()
    "if "-MiniBufExplorer-" == bufname("%")
       "setlocal statusline=\[Buffers\]
       ""setlocal statusline+=\[\-Mini\ Buffers\ Explorer\-\] 
       ""setlocal statusline+=%=\ %1*\|%*\ %<%P
        ""setlocal statusline=%2*%-3.3n%0*
        ""setlocal statusline+=\[Buffers\]
        ""setlocal statusline+=%=%2*\ %<%P
    "endif
"endfun

"au BufWinEnter *
            "\ let oldwinnr=winnr() |
            "\ windo call FixMiniBufExplorerTitle() |
            "\ exec oldwinnr . " wincmd w"
"==========================================
" CtrlP
"==========================================
noremap <Leader>o :CtrlPBuffer<cr>
inoremap <C-P> <Esc>:CtrlP<cr>
" 工作目录
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:20'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" 默认只搜索文件名
let g:ctrlp_by_filename = 1
" ctrlp function list
nnoremap <Leader>fu :CtrlPFunky<Cr>
nnoremap <Leader>fo :CtrlPMRUFiles<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>)
" funtion匹配高亮
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
"=========================================
" ctags
" ========================================
set tags=tags;
"=========================================
" super tab
" ========================================
"let g:SuperTabDefaultCompletionType = "<c-x><c-u>"
"==========================================
"Neocomplete
"==========================================
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" 禁止自动弹出
"let g:neocomplete#disable_auto_complete= 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
"inoremap <expr><C-g">     neocomplete#undo_completion()
"inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <silent>" <Esc> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
  "return pumvisible() ? neocomplete#close_popup() : "\<Esc>"
"endfunction
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-"h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplete#close_popup()
"inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"======================================================
"扩展tab
"======================================================
" tab跳转到括号后
inoremap <Tab> <C-R>=TabSkip()<CR>
"inoremap <Esc> <C-R>=TabSkip()<CR>
" 回车插入空行
inoremap <silent> <CR> <C-R>=EnterInsert()<CR>
function TabSkip()
    "if pumvisible()
        "return "\<Down>"
    "else
    let char = getline('.')[col('.') - 1]
    if char == '}' || char == ')' || char == ']' || char == "'"
        return "\<Right>"
    else
        return "\<Tab>"
    endif
endf
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
function EnterInsert()
    "if pumvisible()
        "return neocomplete#close_popup() . "\<CR>"
    "endif

    let char = getline('.')[col('.') - 1]
    if char == '}' || char == ')' || char == ']'
        if pumvisible()
            return "\<CR>"
        else
            return "\<CR>\<Esc>\O"
        endif
    else
        return "\<CR>"
    endif
endf
"======================================================
"未保存的与已保存的diff
"======================================================
func DiffWithSaved()
    let ft=&filetype
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . ft
endfunc
com DiffSaved call DiffWithSaved()
nnoremap <Leader>df :call DiffWithSaved()<CR>

" Auto Session Save/Restore
function GetProjectName()
    " Get the current editing file list, Unix only
    let edit_files = split(system("ps -o command= -p " . getpid()))
    if len(edit_files) >= 2
        let project_path = edit_files[1]
        if project_path[0] != '/'
            let project_path = getcwd() . project_path
        endif
    else
        let project_path = getcwd()
    endif

    return shellescape(substitute(project_path, '[/]', '', 'g'))
endfunction

function SaveSession()
    "NERDTree doesn't support session, so close before saving
    execute ':NERDTreeClose' 
    let project_name = GetProjectName()
    execute 'mksession! ~/.vim/sessions/' . project_name
endfunction

function RestoreSession()
    let session_path = expand('~/.vim/sessions/' . GetProjectName())
    if filereadable(session_path)
        execute 'so ' . session_path
        if bufexists(1)
            for l in range(1, bufnr('$'))
                if bufwinnr(l) == -1
                    exec 'sbuffer ' . l
                endif
            endfor
        endif
    endif
    "Make sure the syntax is on
    syntax on 
endfunction

"nmap <leader>ss :call SaveSession()
"nmap <leader>sr :call RestoreSession()
"autocmd VimLeave * call SaveSession()
"autocmd VimEnter * call RestoreSession()
